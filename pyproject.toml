[project]
name = "document-to-anki-cli"
version = "0.1.0"
description = "Convert documents to Anki flashcards using AI - supports PDF, DOCX, TXT, MD files with both CLI and web interfaces"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    {name = "Document to Anki CLI", email = "support@example.com"}
]
license = {text = "MIT"}
keywords = ["anki", "flashcards", "ai", "gemini", "study", "education", "cli", "web"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Education",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Education",
    "Topic :: Text Processing",
    "Topic :: Utilities",
]
dependencies = [
    # Core dependencies
    "click>=8.2.1",
    "fastapi>=0.115.14",
    "uvicorn>=0.35.0",
    "pydantic>=2.9.0",
    "pydantic-settings>=2.0.0",
    "python-dotenv>=1.1.1",
    # Document processing
    "python-docx>=1.1.0",
    # Web interface
    "Jinja2>=3.1.0",
    "python-multipart>=0.0.6",
    # AI/LLM integration
    "litellm>=1.73.6",
    # Data processing
    "pandas>=2.3.2",
    "numpy>=1.24.0",
    # CLI enhancements
    "rich>=14.1.0",
    "loguru>=0.7.2",
    "pdfplumber>=0.11.7",
    "pypdf>=6.0.0",
    "altair>=5.5.0",
    "blinker>=1.9.0",
    "cachetools>=6.1.0",
    "docx>=0.2.4",
    "gitdb>=4.0.12",
    "ollama>=0.5.3",
    "openai>=1.101.0",
    "streamlit>=1.48.1",
    "tornado>=6.5.2",
    "tenacity>=9.1.2",
    "uritemplate>=4.2.0",
    "lint>=1.2.1",
]

[project.scripts]
document-to-anki = "document_to_anki.cli.main:main"
document-to-anki-web = "document_to_anki.web.app:run_server"

[project.entry-points."console_scripts"]
anki-maker = "document_to_anki.cli.main:main"
anki-maker-web = "document_to_anki.web.app:run_server"

[project.urls]
Homepage = "https://github.com/fjacquet/anki-maker"
Documentation = "https://github.com/fjacquet/anki-maker#readme"
Repository = "https://github.com/fjacquet/anki-maker"
Issues = "https://github.com/fjacquet/anki-maker/issues"

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.4.1",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.14.1",
    "pytest-cov>=4.0.0",
    "pytest-html>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pyyaml>=6.0.0",
    
    # Code quality
    "ruff>=0.1.0",
    "mypy>=1.17.1",
    "bandit>=1.8.6",
    "safety>=3.2.4",
    
    # Development utilities
    "pre-commit>=3.0.0",
    "watchdog>=6.0.0",
    "psutil>=7.0.0",
]


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.12.
target-version = "py312"

[tool.ruff.lint]
# Enable a broader set of rules for more comprehensive checks.
select = [
    "E",  # pycodestyle errors
    "F",  # Pyflakes
    "B",  # flake8-bugbear
    "I",  # isort
    "UP", # pyupgrade
]
ignore = ["F841"]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "pypdf.*",
    "docx.*",
    "litellm.*",
    "pandas.*",
    "numpy.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

[tool.uv]
dev-dependencies = [
    "bandit>=1.8.6",
    "pip-audit>=2.9.0",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "safety>=3.2.4",
]
package=true



[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = [
    "--cov=src/document_to_anki",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=80",
    "--strict-markers",
    "--strict-config",
    "-ra",
    "--tb=short"
]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "web: marks tests for web interface",
    "cli: marks tests for CLI interface",
    "performance: marks tests as performance tests (run separately)",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[dependency-groups]
dev = [
    "mypy>=1.17.1",
    "pytest-mock>=3.14.1",
    "pytest-timeout>=2.4.0",
    "types-pyyaml>=6.0.12.20250822",
]
